{"ast":null,"code":"import _toConsumableArray from\"/home/raka/Desktop/reactku/FrontendWeb_react_redux_Mygadget/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/raka/Desktop/reactku/FrontendWeb_react_redux_Mygadget/node_modules/@babel/runtime/helpers/esm/objectSpread2\";var initialState={carts:[],chart:[],total:0};var cart=function cart(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'GET_CART_FULFILLED':return _objectSpread({},state,{chart:action.payload.data});case'POST_ORDER_FULFILLED':return _objectSpread({},state);case'POST_ORDER_PENDING':return _objectSpread({},state);case'POST_ORDER_REJECTED':return _objectSpread({},state);case'ADD_CART_DATA':var filterCartId=state.carts.map(function(cart){if(cart.id===action.payload.id){cart.quantity+=1;return action.payload;}return cart;});var existedCartData=state.carts.find(function(product){return product.id===action.payload.id;});if(existedCartData){return _objectSpread({},state,{carts:filterCartId,total:state.total+action.payload.price});}else{var newTotal=state.total+action.payload.price;action.payload.quantity=1;return _objectSpread({},state,{carts:[].concat(_toConsumableArray(state.carts),[action.payload]),total:newTotal});}case'DELETE_CART_DATA':var filterCartIdForDelete=state.carts.filter(function(product){return product.id!==action.payload;});var existedCartDelete=state.carts.find(function(product){return product.id===action.payload;});if(existedCartDelete){return _objectSpread({},state,{carts:filterCartIdForDelete,total:state.total-existedCartDelete.price*existedCartDelete.quantity});}case'ADD_QTY':var addQty=state.carts.map(function(product){if(product.id===action.payload){product.quantity+=1;}return product;});var existedCartAdd=state.carts.find(function(product){return product.id===action.payload;});if(existedCartAdd){return _objectSpread({},state,{carts:addQty,total:state.total+existedCartAdd.price});}case'REDUCE_QTY':var reduceQty=state.carts.map(function(product){if(product.id===action.payload){product.quantity=product.quantity-1;}return product;});var existedCartReduce=state.carts.find(function(product){return product.id===action.payload;});if(existedCartReduce.quantity<=0){existedCartReduce.quantity=1;return _objectSpread({},state);}else{return _objectSpread({},state,{carts:reduceQty,total:state.total-existedCartReduce.price});}default:return state;}};export default cart;","map":{"version":3,"sources":["/home/raka/Desktop/reactku/FrontendWeb_react_redux_Mygadget/src/components/redux/reducers/cart.js"],"names":["initialState","carts","chart","total","cart","state","action","type","payload","data","filterCartId","map","id","quantity","existedCartData","find","product","price","newTotal","filterCartIdForDelete","filter","existedCartDelete","addQty","existedCartAdd","reduceQty","existedCartReduce"],"mappings":"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","sourcesContent":["const initialState = {\n    carts: [],\n    chart: [],\n    total: 0\n}\nconst cart = (state = initialState, action) => {\n    switch (action.type) {\n        case 'GET_CART_FULFILLED':\n            return {\n                ...state,\n                chart: action.payload.data\n            }\n\n        case 'POST_ORDER_FULFILLED':\n            return {\n                ...state\n            }\n        case 'POST_ORDER_PENDING':\n            return {\n                ...state\n            }\n        case 'POST_ORDER_REJECTED':\n            return {\n                ...state\n            }\n        case 'ADD_CART_DATA':\n            let filterCartId = state.carts.map(cart => {\n                if (cart.id === action.payload.id) {\n                    cart.quantity += 1\n                    return action.payload\n                }\n                return cart\n            })\n            let existedCartData = state.carts.find(product => product.id === action.payload.id)\n            if (existedCartData) {\n                return {\n                    ...state,\n                    carts: filterCartId,\n                    total: state.total + action.payload.price\n                }\n            }\n            else {\n                let newTotal = state.total + action.payload.price\n                action.payload.quantity = 1;\n                return {\n                    ...state,\n                    carts: [...state.carts, action.payload],\n                    total: newTotal\n                }\n\n            }\n        case 'DELETE_CART_DATA':\n            const filterCartIdForDelete = state.carts.filter(\n                product => product.id !== action.payload,\n            );\n            let existedCartDelete = state.carts.find(\n                product => product.id === action.payload,\n            );\n            if (existedCartDelete) {\n                return {\n                    ...state,\n                    carts: filterCartIdForDelete,\n                    total:\n                        state.total - existedCartDelete.price * existedCartDelete.quantity,\n                };\n            }\n        case 'ADD_QTY':\n            const addQty = state.carts.map(product => {\n                if (product.id === action.payload) {\n                    product.quantity += 1\n                }\n                return product\n            })\n            let existedCartAdd = state.carts.find(product => product.id === action.payload)\n            if (existedCartAdd) {\n                return {\n                    ...state,\n                    carts: addQty,\n                    total: state.total + existedCartAdd.price\n                }\n            }\n        case 'REDUCE_QTY':\n            const reduceQty = state.carts.map(product => {\n                if (product.id === action.payload) {\n                    product.quantity = product.quantity - 1\n                }\n                return product\n            })\n            let existedCartReduce = state.carts.find(product => product.id === action.payload)\n            if (existedCartReduce.quantity <= 0) {\n                existedCartReduce.quantity = 1;\n                return {\n                    ...state,\n                }\n            } else {\n                return {\n                    ...state,\n                    carts: reduceQty,\n                    total: state.total - existedCartReduce.price\n                }\n            }\n        default:\n            return state\n    }\n}\nexport default cart;"]},"metadata":{},"sourceType":"module"}