{"ast":null,"code":"const initialState = {\n  carts: [],\n  chart: [],\n  total: 0\n};\n\nconst cart = (state = initialState, action) => {\n  switch (action.type) {\n    case 'GET_CART_FULFILLED':\n      return { ...state,\n        chart: action.payload.data\n      };\n\n    case 'POST_ORDER_FULFILLED':\n      return { ...state\n      };\n\n    case 'POST_ORDER_PENDING':\n      return { ...state\n      };\n\n    case 'POST_ORDER_REJECTED':\n      return { ...state\n      };\n\n    case 'ADD_CART_DATA':\n      let filterCartId = state.carts.map(cart => {\n        if (cart.id === action.payload.id) {\n          cart.quantity += 1;\n          return action.payload;\n        }\n\n        return cart;\n      });\n      let existedCartData = state.carts.find(product => product.id === action.payload.id);\n\n      if (existedCartData) {\n        return { ...state,\n          carts: filterCartId,\n          total: state.total + action.payload.price\n        };\n      } else {\n        let newTotal = state.total + action.payload.price;\n        action.payload.quantity = 1;\n        return { ...state,\n          carts: [...state.carts, action.payload],\n          total: newTotal\n        };\n      }\n\n    case 'DELETE_CART_DATA':\n      const filterCartIdForDelete = state.carts.filter(product => product.id !== action.payload);\n      let existedCartDelete = state.carts.find(product => product.id === action.payload);\n\n      if (existedCartDelete) {\n        return { ...state,\n          carts: filterCartIdForDelete,\n          total: state.total - existedCartDelete.price * existedCartDelete.quantity\n        };\n      }\n\n    case 'ADD_QTY':\n      const addQty = state.carts.map(product => {\n        if (product.id === action.payload) {\n          product.quantity += 1;\n        }\n\n        return product;\n      });\n      let existedCartAdd = state.carts.find(product => product.id === action.payload);\n\n      if (existedCartAdd) {\n        return { ...state,\n          carts: addQty,\n          total: state.total + existedCartAdd.price\n        };\n      }\n\n    case 'REDUCE_QTY':\n      const reduceQty = state.carts.map(product => {\n        if (product.id === action.payload) {\n          product.quantity = product.quantity - 1;\n        }\n\n        return product;\n      });\n      let existedCartReduce = state.carts.find(product => product.id === action.payload);\n\n      if (existedCartReduce.quantity <= 0) {\n        existedCartReduce.quantity = 1;\n        return { ...state\n        };\n      } else {\n        return { ...state,\n          carts: reduceQty,\n          total: state.total - existedCartReduce.price\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default cart;","map":{"version":3,"sources":["/home/raka/Desktop/reactku/FrontendWeb_react_redux_Mygadget/src/components/redux/reducers/cart.js"],"names":["initialState","carts","chart","total","cart","state","action","type","payload","data","filterCartId","map","id","quantity","existedCartData","find","product","price","newTotal","filterCartIdForDelete","filter","existedCartDelete","addQty","existedCartAdd","reduceQty","existedCartReduce"],"mappings":"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","sourcesContent":["const initialState = {\n    carts: [],\n    chart: [],\n    total: 0\n}\nconst cart = (state = initialState, action) => {\n    switch (action.type) {\n        case 'GET_CART_FULFILLED':\n            return {\n                ...state,\n                chart: action.payload.data\n            }\n\n        case 'POST_ORDER_FULFILLED':\n            return {\n                ...state\n            }\n        case 'POST_ORDER_PENDING':\n            return {\n                ...state\n            }\n        case 'POST_ORDER_REJECTED':\n            return {\n                ...state\n            }\n        case 'ADD_CART_DATA':\n            let filterCartId = state.carts.map(cart => {\n                if (cart.id === action.payload.id) {\n                    cart.quantity += 1\n                    return action.payload\n                }\n                return cart\n            })\n            let existedCartData = state.carts.find(product => product.id === action.payload.id)\n            if (existedCartData) {\n                return {\n                    ...state,\n                    carts: filterCartId,\n                    total: state.total + action.payload.price\n                }\n            }\n            else {\n                let newTotal = state.total + action.payload.price\n                action.payload.quantity = 1;\n                return {\n                    ...state,\n                    carts: [...state.carts, action.payload],\n                    total: newTotal\n                }\n\n            }\n        case 'DELETE_CART_DATA':\n            const filterCartIdForDelete = state.carts.filter(\n                product => product.id !== action.payload,\n            );\n            let existedCartDelete = state.carts.find(\n                product => product.id === action.payload,\n            );\n            if (existedCartDelete) {\n                return {\n                    ...state,\n                    carts: filterCartIdForDelete,\n                    total:\n                        state.total - existedCartDelete.price * existedCartDelete.quantity,\n                };\n            }\n        case 'ADD_QTY':\n            const addQty = state.carts.map(product => {\n                if (product.id === action.payload) {\n                    product.quantity += 1\n                }\n                return product\n            })\n            let existedCartAdd = state.carts.find(product => product.id === action.payload)\n            if (existedCartAdd) {\n                return {\n                    ...state,\n                    carts: addQty,\n                    total: state.total + existedCartAdd.price\n                }\n            }\n        case 'REDUCE_QTY':\n            const reduceQty = state.carts.map(product => {\n                if (product.id === action.payload) {\n                    product.quantity = product.quantity - 1\n                }\n                return product\n            })\n            let existedCartReduce = state.carts.find(product => product.id === action.payload)\n            if (existedCartReduce.quantity <= 0) {\n                existedCartReduce.quantity = 1;\n                return {\n                    ...state,\n                }\n            } else {\n                return {\n                    ...state,\n                    carts: reduceQty,\n                    total: state.total - existedCartReduce.price\n                }\n            }\n        default:\n            return state\n    }\n}\nexport default cart;"]},"metadata":{},"sourceType":"module"}